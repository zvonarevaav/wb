import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from datetime import timedelta, datetime
import asyncio
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
scheduler = AsyncIOScheduler()


class ReminderBot:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def set_reminder(self, message: Message, task: str, amount: int, unit: str):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏
        if unit == 'min':
            delta = timedelta(minutes=amount)
        elif unit == 'h':
            delta = timedelta(hours=amount)
        elif unit == 'd':
            delta = timedelta(days=amount)
        elif unit == 'w':
            delta = timedelta(weeks=amount)
        elif unit == 'mo':
            delta = timedelta(days=amount * 30)  # –£—Å–ª–æ–≤–Ω—ã–π –º–µ—Å—è—Ü = 30 –¥–Ω–µ–π
        else:
            delta = timedelta(minutes=amount)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω—É—Ç—ã

        reminder_time = datetime.now() + delta
        logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞: {reminder_time}")

        await message.answer(f"–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞: '{task}'. –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {amount} {unit}.")

        try:
            scheduler.add_job(self.send_reminder_async, DateTrigger(run_date=reminder_time),
                              args=(message.chat.id, task), id=f"reminder_{message.chat.id}_{task}")
            logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –∑–∞–¥–∞—á—É: {task}, –≤—Ä–µ–º—è: {reminder_time}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")

    async def send_reminder_async(self, chat_id: int, task: str):
        try:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ó–∞–¥–∞—á–∞: {task}, —á–∞—Ç: {chat_id}")
            await bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ: '{task}'")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
reminder_bot = ReminderBot(bot)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
@dp.message(Command("start"))
async def send_welcome(message: Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å. üìù\n\n"
        "–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:\n"
        "1. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @bot_name ctrl N{unit}\n"
        "   –ì–¥–µ N ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∞ {unit} ‚Äî –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏:\n"
        "   - min (–º–∏–Ω—É—Ç—ã)\n"
        "   - h (—á–∞—Å—ã)\n"
        "   - d (–¥–Ω–∏)\n"
        "   - w (–Ω–µ–¥–µ–ª–∏)\n"
        "   - mo (–º–µ—Å—è—Ü—ã)\n\n"
        "2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
        "–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: @bot_name ctrl 5d ‚Äî –Ω–∞–ø–æ–º–Ω–∏—Ç —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π.\n"
    )
    await message.answer(welcome_text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ "@bot_name ctrl 5min" –∏–ª–∏ "@bot_name ctrl 5d"
@dp.message(lambda message: re.match(r"@bot_name ctrl (\d+)(min|h|d|w|mo)", message.text))
async def handle_ctrl_command(message: Message):
    match = re.match(r"@bot_name ctrl (\d+)(min|h|d|w|mo)", message.text)
    if match:
        amount = int(match.group(1))
        unit = match.group(2)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–¥–∞—á–∞ (—á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç)
        if message.reply_to_message:
            task = message.reply_to_message.text
        else:
            await message.answer("–û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await reminder_bot.set_reminder(message, task, amount, unit)
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @bot_name ctrl 5min, @bot_name ctrl 5h, @bot_name ctrl 5d (–Ω–∞–ø—Ä–∏–º–µ—Ä)")


async def main():
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
